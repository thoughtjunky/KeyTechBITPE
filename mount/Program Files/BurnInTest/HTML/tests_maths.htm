<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>CPU test</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="Maths test suite,Addition,Subtraction,Multiplication,Division,Integer,Floating point" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?tests_maths.htm"; }
  else { parent.quicksync('a6.5'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#649CCC">
  <tr valign="middle">
    <td align="left">
      <p class="p_Headingpage"><span class="f_Headingpage">CPU Test</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="overview.htm"><img src="nav_up_blue.gif" border=0 alt="Top"></a>&nbsp;
     <a href="bluetooth.htm"><img src="nav_left_blue.gif" border=0 alt="Previous"></a>&nbsp;
     <a href="tests_disk.htm"><img src="nav_right_blue.gif" border=0 alt="Next"></a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p style="margin: 0px 0px 8px 0px;">The CPU test exercises and verifies a wide range of CPU instructions, at user specified loads. The user selectable sub-categories of the CPU test are:</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>General purpose instructions (x86)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Floating Point Unit (FPU) instructions (x87)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>CPU extension instructions (x86 extensions). </td></tr></table></div><p style="margin: 0px 0px 0px 24px;">The specific extension instructions may be selected: MMX, 3DNow!, SSE, SSE2, SSE3, SSE4.1, SSE4.2 and SSE4a.</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Prime number test</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Maximum heat test</td></tr></table></div><p>&nbsp;</p>
<p style="margin: 0px 0px 8px 0px;">The numbers displayed in the test window for this test represent how many millions of CPU operations have been performed and verified. Each different math’s test is run for half a second. After all tests have been run the cycle count is incremented. The duty cycle and the CPU speed determine how many operations can be processed during the half second period. Note however that if only the Maximum heat test is selected, then the duty cycle is set to 100% and a single cycle is defined to be 1 trillion CPU operations.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>By default, a CPU test is run on each CPU core. The number of CPU tests running a particular sub-category is shown in the test window in the "Threads" column. </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>The number of CPUs (Packages x cores x threads) that can be tested is up to 256 (where supported by the Operating System). That is, CPUs across multiple "processor groups" can be tested (see Note 2 below).</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>It is possible to raise an <span style="font-style: italic; font-weight: bold;">error on a user defined CPU temperature threshold </span>being exceeded. It is also possible to automatically stop testing in this scenario.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p>The sub-categories of this test are described below.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-style: italic; font-weight: bold;">General purpose instructions</span></p>
<p>This test exercises and verifies correct operation of CPU instructions from the following groups:</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Integer mathematics (e.g. add, subtract, multiply and divide)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Data transfer instructions (e.g. pushing/popping data to/from the stack)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Bitwise logical instructions (e.g. bitwise and/or/xor)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Shift and rotate instructions &nbsp;(e.g. shift data left x number of bits)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Logical instructions (e.g. equals)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Control transfer instructions (e.g. jump on x greater than y)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 8px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>String instructions (eg. copy a text string)</td></tr></table></div><p><span style="color: #000000;">&nbsp;</span></p>
<p>Known and random data sets are used to exercise and verify correct operation. On 32-bit systems, 32-bit data sets are used. On 64-bit systems, 64-bit data sets are used. The random numbers are generated regularly to provide a larger data set, as well as ensure that the CPU caches overflow and that this mechanism is tested. </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-style: italic; font-weight: bold;">Floating Point Unit (FPU) instructions</span></p>
<p>This test exercises and verifies correct operation of CPU instructions from the following groups:</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Floating Point math (e.g. add, subtract, multiply and divide)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Transcendental's (e.g. sine, cosine)</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>Load constants (e.g. load Pi)</td></tr></table></div><p><span style="color: #000000;">&nbsp;</span></p>
<p>Known and random data sets are used to exercise and verify correct operation. On 32-bit systems, 32-bit floating point data sets are used. On 64-bit systems, 64-bit floating point data sets are used. The random numbers are generated regularly to provide a larger data set, as well as ensure that the CPU caches overflow and that this mechanism is tested. </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-style: italic; font-weight: bold;">Extension instructions (x86 extensions)</span></p>
<p>This test exercises extensions to the x86 CPU instruction set for a variety of applications, such as multimedia.</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 8px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>3DNow!: This test exercises and verifies correct operation of CPU 3DNow! instructions, including a sample of moving 3DNow! registers, adding, subtracting, and multiplying. Known and random data sets are used to exercise and verify correct operation. Data sets are pairs of 32-bit floats (eg. x,y), where x and y are 32-bit floats. </td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>MMX: As above, but for MMX instructions. Instructions include moving MMX registers, adding, subtracting, and multiplying. Data set: 64-bit data sets are used. </td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>SSE : As above, but for SSE instructions. Instructions include moving SSE registers, adding, subtracting, and multiplying. Data set: groups of 4 x 32-bit floats (e.g. a,b,c,d) where a,b,c and d are 32-bit floats. </td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 8px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>SSE2: As for the SSE test, but for SSE2 instructions. Data set: pairs of 64-bit floats (e.g. x,y) where x,y are 64-bit floats.</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 8px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>SSE3: As for the SSE2 test, but for SSE3 instructions. Data set: pairs of 64-bit floats.</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 8px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>SSE4.1: As for the SSE3 test, but for SSE4.1. Instructions include a sample of moving registers and multiplication. Data set: pairs of 64-bit integers.</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 8px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>SSE4.2: As for the SSE4.1 test, but for SSE4.2 instructions. &nbsp;Instructions include CRC helper functions. Data set: pairs of 32-bit integers.</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 8px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="13"><span style="font-size: 10pt; font-family: 'Arial Unicode MS', 'Lucida Sans Unicode', 'Arial'; color: #000000;">&#8226;</span></td><td>SSE4a: As for the SSE4.1 test, but for SSE4.a instructions. &nbsp;Instructions include data extraction functions. Data set: pairs of 64-bit unsigned integers.</td></tr></table></div><p>Notes: </p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="15"><span style="font-size: 10pt; font-family: 'Arial'; color: #000000;">1.</span></td><td>MMX stand for "Multimedia Extensions".</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="15"><span style="font-size: 10pt; font-family: 'Arial'; color: #000000;">2.</span></td><td>SSE stand for "Streaming SIMD extensions".</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="15"><span style="font-size: 10pt; font-family: 'Arial'; color: #000000;">3.</span></td><td>SIMD stands for "Single Instruction Multiple Data."</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="15"><span style="font-size: 10pt; font-family: 'Arial'; color: #000000;">4.</span></td><td>Tests are only performed if the CPU supports that test. For example, SSE3 tests will only be performed if the CPU supports SSE3.</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="15"><span style="font-size: 10pt; font-family: 'Arial'; color: #000000;">5.</span></td><td>Known and random data sets are used to exercise and verify correct operation</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="15"><span style="font-size: 10pt; font-family: 'Arial'; color: #000000;">6.</span></td><td>The random test data is generated regularly to provide a larger data set, as well as ensure that the CPU caches overflow and that this mechanism is tested. </td></tr></table></div><p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-style: italic; font-weight: bold;">Prime number</span></p>
<p>This test exercises and verifies correct operation of CPU through the use of a prime number generation algorithm.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><a name="cpu_max"></a><span style="font-style: italic; font-weight: bold;">Maximum heat</span></p>
<p>Based on PassMark Software testing of a set of CPU algorithms for different systems, a test has been produced that aims to generate the highest CPU temperature possible by BurnInTest. This test is aimed at checking that the cooling system is capable of doing its job with the system CPU under extreme load, especially when the CPU has been overclocked.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-style: italic; font-weight: bold;">Notes:</span></p>
<p style="margin: 0px 0px 8px 0px;">(1) Some CPU operation tests are only supported in the 32-bit version of BurnInTest. These are: 3DNow!, MMX, Push/Pop stack operations, Transcendental's and Load constants.</p>
<p style="margin: 0px 0px 8px 0px;">(2) A normal software application only has access to a single "processor group". BurnInTest has been designed to test CPUs across multiple processor groups and hence test more than 64 logical processors. For more information on a "processor groups" see Microsoft's website, an extract is included below:</p>
<p style="margin: 0px 0px 8px 24px;"><span style="font-size: 8pt;">"The 64-bit versions of Windows 7 and Windows Server 2008 R2 support more than 64 logical processors on a single computer. This functionality is not available on 32-bit versions of Windows. </span></p>
<p style="margin: 7px 0px 7px 24px;"><span style="font-size: 8pt;">Systems with more than one physical processor or systems with physical processors that have multiple cores provide the operating system with multiple logical processors. A </span><span style="font-size: 8pt; font-style: italic;">logical processor</span><span style="font-size: 8pt;"> is one logical computing engine from the perspective of the operating system, application or driver. A </span><span style="font-size: 8pt; font-style: italic;">core</span><span style="font-size: 8pt;"> is one processor unit, which can consist of one or more logical processors. A </span><span style="font-size: 8pt; font-style: italic;">physical processor</span><span style="font-size: 8pt;"> can consist of one or more cores. A physical processor is the same as a processor package, a socket, or a CPU. </span></p>
<p style="margin: 7px 0px 7px 24px;"><span style="font-size: 8pt;">Support for systems that have more than 64 logical processors is based on the concept of a </span><span style="font-size: 8pt; font-style: italic;">processor group</span><span style="font-size: 8pt;">, which is a static set of up to 64 logical processors that is treated as a single scheduling entity. Processor groups are numbered starting with 0. Systems with fewer than 64 logical processors always have a single group, Group 0."</span> </p>
<p style="margin: 7px 0px 7px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>

</td></tr></table>

</body>
</html>
